user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;

    # Upstream for Keycloak


    # Upstream for NestJS microservice
    upstream webrtc {
        server webrtc:3000;
    }

    upstream peerjs {
        server webrtc:3001;
    }

    server {
        listen 3000 ssl http2;
        server_name localhost.local;

        ssl_certificate ./clientGeolocation.crt.pem;
        ssl_certificate_key ./clientGeolocation.key.pem;

        client_body_buffer_size 128k;
        proxy_request_buffering off;
        client_max_body_size 2000M; # Example size matching your needs

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
         # Location block for React frontend
        location / {

            proxy_pass http://webrtc;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port 3000;
            add_header Content-Security-Policy "frame-src *; frame-ancestors *; object-src *;";
            add_header Access-Control-Allow-Origin *;  # Allow all origins
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';  # Allow specific methods
            add_header Access-Control-Allow-Headers 'Content-Type, X-Requested-With';  # Allow headers
            add_header Access-Control-Allow-Credentials true;  # Allow credentials
            proxy_redirect off;

              # WebSocket specific headers
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_http_version 1.1;

        }
    }

    server {
       listen 3001 ssl http2;
        server_name localhost.local;

        ssl_certificate ./clientGeolocation.crt.pem;
        ssl_certificate_key ./clientGeolocation.key.pem;

        client_body_buffer_size 128k;
        proxy_request_buffering off;
        client_max_body_size 2000M; # Example size matching your needs

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";

        location / {
            proxy_pass http://peerjs/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port 3001;
            add_header Access-Control-Allow-Credentials true always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            proxy_redirect off;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_http_version 1.1;
        }
    }
}